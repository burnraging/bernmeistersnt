/*
Copyright (c) 2024 Bernard M. Woodland

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace common_dll
{
    public static partial class SusxConverter
    {
#pragma warning disable CS8618
        private static string[] Line;
        private static int N;
        private static string[] Indent;
        private static int Lvl;

        private static TreeObject[] Tree;
        private static int TreeIndex;
        private static string BookCode;
        private static int CurrentChapterNumber;
        private static int CurrentVerseNumber;

        private const int TARGET_LINE_LENGTH = 100;
#pragma warning restore

        public static void WriteBook(string bookCode,
                                     ref TreeObject[] tree,
                                     string writeFolder,
                                     string[] copyrightText,
                                     string translationName)
        {
            Tree = tree;

            string fileName = string.Format("{0}.usx", bookCode);
            Utils.ConcatenateFqFileName(fileName, writeFolder, out string fqFileName);
            string dirNameOnly = Path.GetDirectoryName(fqFileName)!;
            if (dirNameOnly == null)
                dirNameOnly = "[null]";

            if (!Directory.Exists(dirNameOnly))
            {
                Utils.LogFatal("Folder {0} doesn't exist when writing USX 3.x book {1}", dirNameOnly, bookCode);
            }

            Indent = Utils.BuildIndentationArray();

            Lvl = 0;     // current indentation level. Index in 'indentation'
            Line = new string[100000];
            N = 0;
            TreeIndex = 0;

            Line[N++] = "<?xml version=\"1.0\" encoding=\"utf-8\"?>";
            Line[N++] = "<!-- Generated by UsxConvert's \"ToUsx3\" utility -->";
            if (copyrightText != null)
            {
                for (int i = 0; i < copyrightText.Length; i++)
                {
                    Line[N++] = string.Format("<!-- {0} -->", copyrightText[i]);
                }
            }

            if (Tree[TreeIndex].ElementType != ElementEnum.USX_WRAPPER)
                Utils.LogFatal("Tree badly formatted (usx wrapper)");
            TreeIndex = SusxConverter.TreeStep(ref Tree, TreeIndex);

            Line[N++] = string.Format("{0}<usx version=\"3.0\">", Indent[Lvl]);
            Lvl++;

            if (Tree[TreeIndex].ElementType != ElementEnum.BOOK)
                Utils.LogFatal("{0}: tree badly formatted (book {1})", Tree[TreeIndex].Code != null ? Tree[TreeIndex].Code : "[book unknown]");
            BookCode = Tree[TreeIndex].Code;
            Line[N++] = string.Format("{0}<book code=\"{1}\" style=\"id\">{2}</book>", Indent[Lvl], BookCode, translationName);
            TreeIndex = SusxConverter.TreeStep(ref Tree, TreeIndex);

            WriteTableOfContents();
            WriteIntroduction();

            while (true)
            {
                bool chapterWriteReachedEndOfFile = WriteChapter();
                if (chapterWriteReachedEndOfFile)
                {
                    break;
                }
            }

            Lvl--;
            Line[N++] = string.Format("{0}</usx>", Indent[Lvl]);
            Array.Resize(ref Line, N);

            File.WriteAllLines(fqFileName, Line);
        }

        private static void WriteTableOfContents()
        {
            Line[N++] = string.Format("{0}<!-- Titles and Table of Contents -->", Indent[Lvl]);

            while (true)
            {
                ElementEnum element = Tree[TreeIndex].ElementType;
                string style = Tree[TreeIndex].Style;
                if (element != ElementEnum.PARA || !(IsBookTitleParaStyle(style) || IsBookHeaderParaStyle(style)))
                {
                    break;
                }

                // For TOC para's, text is included with the para object.
                // For the other para objects, text is a child object.
                Line[N++] = string.Format("{0}<para style=\"{1}\">{2}</para>", Indent[Lvl], Tree[TreeIndex].Style, Tree[TreeIndex].Text);

                TreeIndex = SusxConverter.TreeStep(ref Tree, TreeIndex);
            }
        }

        private static void WriteIntroduction()
        {
            bool didComment = false;

            while (true)
            {
                ElementEnum element = Tree[TreeIndex].ElementType;
                string style = Tree[TreeIndex].Style;
                // From here to "chapter" tag, any para element is assumed to be a valid introduction style.
                if (element != ElementEnum.PARA)
                {
                    if (!didComment)
                        Line[N++] = string.Format("{0}<!-- (no introduction) -->", Indent[Lvl]);
                    break;
                }

                if (!didComment)
                {
                    Line[N++] = string.Format("{0}<!-- Introduction -->", Indent[Lvl]);
                    didComment = true;
                }

                // Unlike TOC para's, text is not included with an introduction para object.
                string paraSingleString = BuildParaSubtree();
                string[] paraMultiLines = UsxConverter.SingleStringToMultiXmlStrings(paraSingleString, TARGET_LINE_LENGTH, Indent[Lvl], Indent[Lvl+1]);

                for (int i = 0; i < paraMultiLines.Length; i++)
                {
                    Line[N++] = string.Format("{0}", paraMultiLines[i]);
                }

                TreeIndex = SusxConverter.TreeStep(ref Tree, TreeIndex);
            }

        }

        // Returns 'true' if finished
        private static bool WriteChapter()
        {
            if (Tree[TreeIndex].ElementType != ElementEnum.CHAPTER || Tree[TreeIndex].Sid == null)
            {
                Utils.LogFatal("WriteChapter(): Expected chapter start tag in {0} chapter {1} and didn't find it! Fix code!", BookCode, CurrentChapterNumber);
            }

            CurrentChapterNumber = Tree[TreeIndex].Number;

            Line[N++] = string.Format("{0}<!-- Chapter {1} -->", Indent[Lvl], CurrentChapterNumber);
            Line[N++] = string.Format("{0}<chapter number=\"{1}\" style=\"{2}\" sid=\"{3}\" />", Indent[Lvl],
                                     CurrentChapterNumber, Tree[TreeIndex].Style, Tree[TreeIndex].Sid);
            Lvl++;         // chapter elements are closed (have no children), but elements under them need to be indented anyways

            TreeIndex = SusxConverter.TreeStep(ref Tree, TreeIndex);

            bool noteCommentWritten = false;

            ElementEnum nextElement = Tree[TreeIndex].ElementType;

            while (nextElement == ElementEnum.PARA ||
                   nextElement == ElementEnum.NOTE)
            {
                if (nextElement == ElementEnum.CHAPTER)
                {
                    break;
                }
                else if (nextElement == ElementEnum.NOTE)
                {
                    if (!noteCommentWritten)
                    {
                        Line[N++] = string.Format("{0}<!-- Footnotes -->", Indent[Lvl]);
                        noteCommentWritten = true;
                    }
                    WriteNote();
                }
                else
                {
                    string singleStringParagraph = BuildParaSubtree();

                    string[] multi = UsxConverter.SingleStringToMultiXmlStrings(singleStringParagraph,
                                                                                TARGET_LINE_LENGTH,
                                                                                Indent[Lvl],
                                                                                Indent[Lvl+1]);
                    for (int k = 0; k < multi.Length; ++k)
                    {
                        Line[N++] = string.Format("{0}", multi[k]);
                    }
                }

                nextElement = Tree[TreeIndex].ElementType;
            }

            if (Tree[TreeIndex].ElementType != ElementEnum.CHAPTER || Tree[TreeIndex].Eid == null || Tree[TreeIndex].Eid.Length == 0)
                Utils.LogFatal("WriteChapter(): {0} chapter {1}: expected end-chapter tag!", BookCode, CurrentChapterNumber);

            Lvl--;
            Line[N++] = string.Format("{0}<chapter eid=\"{1}\" />", Indent[Lvl], Tree[TreeIndex].Eid);
            TreeIndex = SusxConverter.TreeStep(ref Tree, TreeIndex);

            return TreeIndex == -1;
        }

        private static void WriteNote()
        {
            string noteStyle = "";
            if (Tree[TreeIndex].Style != null && Tree[TreeIndex].Style.Length > 0)
                noteStyle = string.Format(" style=\"{0}\"", Tree[TreeIndex].Style);
            string noteCaller = "";
            if (Tree[TreeIndex].Caller != null && Tree[TreeIndex].Caller.Length > 0)
                noteCaller = string.Format(" caller=\"{0}\"", Tree[TreeIndex].Caller);
            Line[N++] = string.Format("{0}<note{1}{2}>", Indent[Lvl], noteStyle, noteCaller);
            Lvl++;

            // Todo: make a BuildNoteSubtree() after debugging BuildParaSubtree()
            TreeIndex = Tree[TreeIndex].NextSiblingHeapIndex;    // hack to hop over note subtree

            Lvl--;
            Line[N++] = string.Format("{0}</note>", Indent[Lvl]);
        }

        // Make a single string out of the children of a para element.
        // The children will consist of a mixture of text and of char elements
        // that encapsulate other char elements or text.
        private static string BuildParaSubtree()
        {
            string singleString = "";   // make paragraph into long string, break up later

            string[] closingElementStack = new string[20];
            int stackPointer = 0;

            string paraParm = "";
            if (Tree[TreeIndex].Sid != null && Tree[TreeIndex].Sid.Length > 0)
            {
                paraParm = string.Format(" sid=\"{0}\"", Tree[TreeIndex].Sid);
                CurrentVerseNumber = Tree[TreeIndex].Number;
            }
            else if (Tree[TreeIndex].Vid != null && Tree[TreeIndex].Vid.Length > 0)
                paraParm = string.Format(" vid=\"{0}\"", Tree[TreeIndex].Vid);

            singleString += string.Format("<para style=\"{0}\"{1}>", Tree[TreeIndex].Style, paraParm);
            closingElementStack[stackPointer++] = "</para>";

            if (Tree[TreeIndex].ChildrenCount > 0)
            {
                TreeIndex = TreeStep(ref Tree, TreeIndex);

                while (stackPointer > 0)
                {
                    ElementEnum type = Tree[TreeIndex].ElementType;

                    if (type == ElementEnum.CHAR)
                    {
                        singleString += string.Format("<char style=\"{0}\">", Tree[TreeIndex].Style);
                        closingElementStack[stackPointer++] = "</char>";
                    }
                    else if (type == ElementEnum.VERSE)
                    {
                        string verseParm = "";
                        if (Tree[TreeIndex].Sid != null && Tree[TreeIndex].Sid.Length > 0)
                        {
                            verseParm = string.Format("number=\"{0}\" style=\"v\" sid=\"{1}\"", Tree[TreeIndex].Number, Tree[TreeIndex].Sid);
                            CurrentVerseNumber = Tree[TreeIndex].Number;
                        }
                        else if (Tree[TreeIndex].Eid != null && Tree[TreeIndex].Eid.Length > 0)
                            verseParm = string.Format("eid=\"{0}\"", Tree[TreeIndex].Eid);

                        singleString += string.Format("<verse {0} />", verseParm);
                        // "verse" is a closed element, so it won't have any children
                    }
                    else if (type == ElementEnum.BREAK)
                    {
                        singleString += string.Format("<optbreak />");
                        // "optbreak" is a closed element, so it won't have any children
                    }
                    else if (type == ElementEnum.TEXT && Tree[TreeIndex].Text != null)
                    {
                        singleString += string.Format("{0}", Tree[TreeIndex].Text);
                        // text is a closed element, so it won't have any children
                    }
                    else
                    {
                        Utils.LogFatal("BuildParaSubtree(): Illegal element type {0}", type.ToString());
                    }

                    int beforeStepTreeLevel = Tree[TreeIndex].Level;
                    TreeIndex = SusxConverter.TreeStep(ref Tree, TreeIndex);
                    int afterStepTreeLevel = Tree[TreeIndex].Level;
                    int deltaLevels = beforeStepTreeLevel - afterStepTreeLevel;

                    for (int i = 0; i < deltaLevels; i++)
                    {
                        if (stackPointer == 0)
                            Utils.LogFatal("BuildParaSubtree(): Tree stack pointer got off the rails during a pop! Fix code");

                        string thisClosingElement = closingElementStack[--stackPointer];
                        singleString += thisClosingElement;
                    }
                }
            }

            if (stackPointer != 0)
                Utils.LogFatal("BuildParaSubtree(): Tree stack pointer was found to be off the rails! Fix code");

            return singleString;
        }
    }
}